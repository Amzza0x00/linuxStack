/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __HELLO_KERN_SKEL_H__
#define __HELLO_KERN_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct hello_kern {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *rodata_str1_1;
	} maps;
	struct {
		struct bpf_program *hello;
	} progs;
	struct {
		struct bpf_link *hello;
	} links;
	struct hello_kern__rodata_str1_1 {
	} *rodata_str1_1;

#ifdef __cplusplus
	static inline struct hello_kern *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct hello_kern *open_and_load();
	static inline int load(struct hello_kern *skel);
	static inline int attach(struct hello_kern *skel);
	static inline void detach(struct hello_kern *skel);
	static inline void destroy(struct hello_kern *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
hello_kern__destroy(struct hello_kern *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
hello_kern__create_skeleton(struct hello_kern *obj);

static inline struct hello_kern *
hello_kern__open_opts(const struct bpf_object_open_opts *opts)
{
	struct hello_kern *obj;
	int err;

	obj = (struct hello_kern *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = hello_kern__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	hello_kern__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct hello_kern *
hello_kern__open(void)
{
	return hello_kern__open_opts(NULL);
}

static inline int
hello_kern__load(struct hello_kern *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct hello_kern *
hello_kern__open_and_load(void)
{
	struct hello_kern *obj;
	int err;

	obj = hello_kern__open();
	if (!obj)
		return NULL;
	err = hello_kern__load(obj);
	if (err) {
		hello_kern__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
hello_kern__attach(struct hello_kern *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
hello_kern__detach(struct hello_kern *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *hello_kern__elf_bytes(size_t *sz);

static inline int
hello_kern__create_skeleton(struct hello_kern *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "hello_kern";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = ".rodata.str1.1";
	s->maps[0].map = &obj->maps.rodata_str1_1;
	s->maps[0].mmaped = (void **)&obj->rodata_str1_1;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "hello";
	s->progs[0].prog = &obj->progs.hello;
	s->progs[0].link = &obj->links.hello;

	s->data = (void *)hello_kern__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *hello_kern__elf_bytes(size_t *sz)
{
	*sz = 5560;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x78\x0f\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x19\0\
\x01\0\xb7\x01\0\0\x50\x46\x21\0\x63\x1a\xf8\xff\0\0\0\0\x18\x01\0\0\x48\x65\
\x6c\x6c\0\0\0\0\x6f\x20\x65\x42\x7b\x1a\xf0\xff\0\0\0\0\xbf\xa1\0\0\0\0\0\0\
\x07\x01\0\0\xf0\xff\xff\xff\xb7\x02\0\0\x0c\0\0\0\x85\0\0\0\x06\0\0\0\xb7\0\0\
\0\0\0\0\0\x95\0\0\0\0\0\0\0\x48\x65\x6c\x6c\x6f\x20\x65\x42\x50\x46\x21\0\x47\
\x50\x4c\0\x01\x11\x01\x25\x25\x13\x05\x03\x25\x72\x17\x10\x17\x1b\x25\x11\x1b\
\x12\x06\x73\x17\0\0\x02\x34\0\x03\x25\x49\x13\x3f\x19\x3a\x0b\x3b\x0b\x02\x18\
\0\0\x03\x01\x01\x49\x13\0\0\x04\x21\0\x49\x13\x37\x0b\0\0\x05\x24\0\x03\x25\
\x3e\x0b\x0b\x0b\0\0\x06\x24\0\x03\x25\x0b\x0b\x3e\x0b\0\0\x07\x34\0\x03\x25\
\x49\x13\x3a\x0b\x3b\x0b\0\0\x08\x0f\0\x49\x13\0\0\x09\x15\x01\x49\x13\x27\x19\
\0\0\x0a\x05\0\x49\x13\0\0\x0b\x18\0\0\0\x0c\x26\0\x49\x13\0\0\x0d\x16\0\x49\
\x13\x03\x25\x3a\x0b\x3b\x0b\0\0\x0e\x2e\x01\x11\x1b\x12\x06\x40\x18\x7a\x19\
\x03\x25\x3a\x0b\x3b\x0b\x27\x19\x49\x13\x3f\x19\0\0\x0f\x05\0\x03\x25\x3a\x0b\
\x3b\x0b\x49\x13\0\0\x10\x34\0\x02\x18\x03\x25\x3a\x0b\x3b\x0b\x49\x13\0\0\x11\
\x13\x01\x03\x25\x0b\x0b\x3a\x0b\x3b\x05\0\0\x12\x0d\0\x03\x25\x49\x13\x3a\x0b\
\x3b\x05\x38\x0b\0\0\0\x8c\x01\0\0\x05\0\x01\x08\0\0\0\0\x01\0\x0c\0\x01\x08\0\
\0\0\0\0\0\0\x02\x01\x58\0\0\0\x08\0\0\0\x02\x03\x2e\0\0\0\0\x10\x02\xa1\0\x03\
\x3a\0\0\0\x04\x3e\0\0\0\x04\0\x05\x04\x06\x01\x06\x05\x08\x07\x07\x06\x4a\0\0\
\0\x02\xb0\x08\x4f\0\0\0\x09\x60\0\0\0\x0a\x64\0\0\0\x0a\x6e\0\0\0\x0b\0\x05\
\x07\x05\x08\x08\x69\0\0\0\x0c\x3a\0\0\0\x0d\x76\0\0\0\x09\x01\x0c\x05\x08\x07\
\x04\x0e\x01\x58\0\0\0\x01\x5a\x0a\0\x0a\x9d\0\0\0\x0f\x0d\0\x0a\xad\0\0\0\x10\
\x02\x91\0\x0c\0\x0b\xa1\0\0\0\0\x05\x0b\x05\x04\x03\x3a\0\0\0\x04\x3e\0\0\0\
\x0c\0\x08\xb2\0\0\0\x11\x24\xa8\x01\x0d\x0a\x12\x0e\x8b\x01\0\0\x01\x0e\x0a\0\
\x12\x10\x8b\x01\0\0\x01\x0f\x0a\x08\x12\x11\x8b\x01\0\0\x01\x10\x0a\x10\x12\
\x12\x8b\x01\0\0\x01\x11\x0a\x18\x12\x13\x8b\x01\0\0\x01\x12\x0a\x20\x12\x14\
\x8b\x01\0\0\x01\x13\x0a\x28\x12\x15\x8b\x01\0\0\x01\x14\x0a\x30\x12\x16\x8b\
\x01\0\0\x01\x15\x0a\x38\x12\x17\x8b\x01\0\0\x01\x16\x0a\x40\x12\x18\x8b\x01\0\
\0\x01\x17\x0a\x48\x12\x19\x8b\x01\0\0\x01\x18\x0a\x50\x12\x1a\x8b\x01\0\0\x01\
\x19\x0a\x58\x12\x1b\x8b\x01\0\0\x01\x1a\x0a\x60\x12\x1c\x8b\x01\0\0\x01\x1b\
\x0a\x68\x12\x1d\x8b\x01\0\0\x01\x1c\x0a\x70\x12\x1e\x8b\x01\0\0\x01\x1d\x0a\
\x78\x12\x1f\x8b\x01\0\0\x01\x1e\x0a\x80\x12\x20\x8b\x01\0\0\x01\x1f\x0a\x88\
\x12\x21\x8b\x01\0\0\x01\x20\x0a\x90\x12\x22\x8b\x01\0\0\x01\x21\x0a\x98\x12\
\x23\x8b\x01\0\0\x01\x22\x0a\xa0\0\x05\x0f\x07\x08\0\x98\0\0\0\x05\0\0\0\0\0\0\
\0\x15\0\0\0\x22\0\0\0\x43\0\0\0\x4c\0\0\0\x51\0\0\0\x65\0\0\0\x76\0\0\0\x7b\0\
\0\0\x88\0\0\0\x8e\0\0\0\x94\0\0\0\x98\0\0\0\x9c\0\0\0\xa0\0\0\0\xa4\0\0\0\xb2\
\0\0\0\xb6\0\0\0\xba\0\0\0\xbe\0\0\0\xc1\0\0\0\xc4\0\0\0\xc8\0\0\0\xcc\0\0\0\
\xcf\0\0\0\xd2\0\0\0\xd5\0\0\0\xd8\0\0\0\xdb\0\0\0\xde\0\0\0\xe1\0\0\0\xe9\0\0\
\0\xec\0\0\0\xef\0\0\0\xf5\0\0\0\xf8\0\0\0\xfb\0\0\0\x63\x6c\x61\x6e\x67\x20\
\x76\x65\x72\x73\x69\x6f\x6e\x20\x31\x35\x2e\x30\x2e\x37\0\x68\x65\x6c\x6c\x6f\
\x5f\x6b\x65\x72\x6e\x2e\x63\0\x2f\x68\x6f\x6d\x65\x2f\x6c\x61\x6e\x67\x2f\x44\
\x65\x73\x6b\x74\x6f\x70\x2f\x78\x64\x70\x73\x6f\x63\x6b\x73\x2f\x43\x4f\x52\
\x45\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\
\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x62\x70\x66\x5f\x74\
\x72\x61\x63\x65\x5f\x70\x72\x69\x6e\x74\x6b\0\x6c\x6f\x6e\x67\0\x75\x6e\x73\
\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x5f\x5f\x75\x33\x32\0\x68\x65\x6c\x6c\
\x6f\0\x69\x6e\x74\0\x6d\x73\x67\0\x63\x74\x78\0\x72\x31\x35\0\x75\x6e\x73\x69\
\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\0\x72\x31\x34\0\x72\x31\x33\0\x72\x31\x32\
\0\x62\x70\0\x62\x78\0\x72\x31\x31\0\x72\x31\x30\0\x72\x39\0\x72\x38\0\x61\x78\
\0\x63\x78\0\x64\x78\0\x73\x69\0\x64\x69\0\x6f\x72\x69\x67\x5f\x61\x78\0\x69\
\x70\0\x63\x73\0\x66\x6c\x61\x67\x73\0\x73\x70\0\x73\x73\0\x70\x74\x5f\x72\x65\
\x67\x73\0\x14\0\0\0\x05\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9f\xeb\x01\0\
\x18\0\0\0\0\0\0\0\xb4\x01\0\0\xb4\x01\0\0\x57\x01\0\0\0\0\0\0\0\0\0\x02\x02\0\
\0\0\x01\0\0\0\x15\0\0\x04\xa8\0\0\0\x09\0\0\0\x03\0\0\0\0\0\0\0\x0d\0\0\0\x03\
\0\0\0\x40\0\0\0\x11\0\0\0\x03\0\0\0\x80\0\0\0\x15\0\0\0\x03\0\0\0\xc0\0\0\0\
\x19\0\0\0\x03\0\0\0\0\x01\0\0\x1c\0\0\0\x03\0\0\0\x40\x01\0\0\x1f\0\0\0\x03\0\
\0\0\x80\x01\0\0\x23\0\0\0\x03\0\0\0\xc0\x01\0\0\x27\0\0\0\x03\0\0\0\0\x02\0\0\
\x2a\0\0\0\x03\0\0\0\x40\x02\0\0\x2d\0\0\0\x03\0\0\0\x80\x02\0\0\x30\0\0\0\x03\
\0\0\0\xc0\x02\0\0\x33\0\0\0\x03\0\0\0\0\x03\0\0\x36\0\0\0\x03\0\0\0\x40\x03\0\
\0\x39\0\0\0\x03\0\0\0\x80\x03\0\0\x3c\0\0\0\x03\0\0\0\xc0\x03\0\0\x44\0\0\0\
\x03\0\0\0\0\x04\0\0\x47\0\0\0\x03\0\0\0\x40\x04\0\0\x4a\0\0\0\x03\0\0\0\x80\
\x04\0\0\x50\0\0\0\x03\0\0\0\xc0\x04\0\0\x53\0\0\0\x03\0\0\0\0\x05\0\0\x56\0\0\
\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\x01\0\0\x0d\x05\0\0\0\x64\0\0\0\x01\0\
\0\0\x68\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\x6c\0\0\0\x01\0\0\x0c\x04\0\0\0\
\x2d\x01\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x07\0\0\
\0\x09\0\0\0\x04\0\0\0\x32\x01\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\x46\x01\0\0\0\
\0\0\x0e\x08\0\0\0\x01\0\0\0\x4f\x01\0\0\x01\0\0\x0f\0\0\0\0\x0a\0\0\0\0\0\0\0\
\x04\0\0\0\0\x70\x74\x5f\x72\x65\x67\x73\0\x72\x31\x35\0\x72\x31\x34\0\x72\x31\
\x33\0\x72\x31\x32\0\x62\x70\0\x62\x78\0\x72\x31\x31\0\x72\x31\x30\0\x72\x39\0\
\x72\x38\0\x61\x78\0\x63\x78\0\x64\x78\0\x73\x69\0\x64\x69\0\x6f\x72\x69\x67\
\x5f\x61\x78\0\x69\x70\0\x63\x73\0\x66\x6c\x61\x67\x73\0\x73\x70\0\x73\x73\0\
\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\0\x63\x74\x78\0\x69\x6e\
\x74\0\x68\x65\x6c\x6c\x6f\0\x6b\x70\x72\x6f\x62\x65\x2f\x73\x65\x63\x75\x72\
\x69\x74\x79\x5f\x73\x6f\x63\x6b\x65\x74\x5f\x63\x6f\x6e\x6e\x65\x63\x74\0\x2f\
\x68\x6f\x6d\x65\x2f\x6c\x61\x6e\x67\x2f\x44\x65\x73\x6b\x74\x6f\x70\x2f\x78\
\x64\x70\x73\x6f\x63\x6b\x73\x2f\x43\x4f\x52\x45\x2f\x68\x65\x6c\x6c\x6f\x5f\
\x6b\x65\x72\x6e\x2e\x63\0\x69\x6e\x74\x20\x68\x65\x6c\x6c\x6f\x28\x73\x74\x72\
\x75\x63\x74\x20\x70\x74\x5f\x72\x65\x67\x73\x20\x2a\x63\x74\x78\x29\x20\x7b\0\
\x09\x63\x68\x61\x72\x20\x6d\x73\x67\x5b\x5d\x20\x3d\x20\x22\x48\x65\x6c\x6c\
\x6f\x20\x65\x42\x50\x46\x21\x22\x3b\0\x09\x62\x70\x66\x5f\x74\x72\x61\x63\x65\
\x5f\x70\x72\x69\x6e\x74\x6b\x28\x6d\x73\x67\x2c\x20\x73\x69\x7a\x65\x6f\x66\
\x28\x6d\x73\x67\x29\x29\x3b\0\x09\x72\x65\x74\x75\x72\x6e\x20\x30\x3b\0\x63\
\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\
\x45\x5f\x5f\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x6c\x69\x63\x65\x6e\x73\x65\0\
\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\x5c\0\0\0\x70\0\0\0\0\0\
\0\0\x08\0\0\0\x72\0\0\0\x01\0\0\0\0\0\0\0\x06\0\0\0\x10\0\0\0\x72\0\0\0\x05\0\
\0\0\0\0\0\0\x91\0\0\0\xbf\0\0\0\0\x28\0\0\x08\0\0\0\x91\0\0\0\xe0\0\0\0\x07\
\x2c\0\0\x30\0\0\0\x91\0\0\0\0\0\0\0\0\0\0\0\x38\0\0\0\x91\0\0\0\xfd\0\0\0\x02\
\x30\0\0\x48\0\0\0\x91\0\0\0\x22\x01\0\0\x02\x34\0\0\x0c\0\0\0\xff\xff\xff\xff\
\x04\0\x08\0\x08\x7c\x0b\0\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x58\0\0\0\0\0\0\0\
\x97\0\0\0\x05\0\x08\0\x69\0\0\0\x08\x01\x01\xfb\x0e\x0d\0\x01\x01\x01\x01\0\0\
\0\x01\0\0\x01\x01\x01\x1f\x03\0\0\0\0\x21\0\0\0\x23\0\0\0\x03\x01\x1f\x02\x0f\
\x05\x1e\x03\x34\0\0\0\0\x0f\x65\xf1\x4f\x60\xc1\x7f\xcd\x1c\x5b\xed\x33\x22\
\x8e\x58\xb0\x41\0\0\0\x01\x52\x38\x44\xe3\x9f\x96\x0e\x18\x19\xe3\x79\x68\xbd\
\x74\xbe\x3a\x4b\0\0\0\x02\x32\xb0\x94\x5d\xf6\x10\x15\xe3\xdd\x6b\xe9\xac\x5e\
\xa4\x27\x78\x04\0\0\x09\x02\0\0\0\0\0\0\0\0\x03\x09\x01\x05\x07\x0a\x21\x05\0\
\x06\x03\x75\x58\x05\x02\x06\x03\x0c\x20\x2f\x02\x02\0\x01\x01\x2f\x68\x6f\x6d\
\x65\x2f\x6c\x61\x6e\x67\x2f\x44\x65\x73\x6b\x74\x6f\x70\x2f\x78\x64\x70\x73\
\x6f\x63\x6b\x73\x2f\x43\x4f\x52\x45\0\x2e\0\x2f\x75\x73\x72\x2f\x69\x6e\x63\
\x6c\x75\x64\x65\x2f\x62\x70\x66\0\x68\x65\x6c\x6c\x6f\x5f\x6b\x65\x72\x6e\x2e\
\x63\0\x76\x6d\x6c\x69\x6e\x75\x78\x2e\x68\0\x62\x70\x66\x5f\x68\x65\x6c\x70\
\x65\x72\x5f\x64\x65\x66\x73\x2e\x68\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\xd1\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x06\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x03\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\x0b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0c\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x03\0\x12\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x16\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x83\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x58\0\0\0\0\0\0\0\xa7\0\0\0\
\x11\0\x05\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x03\0\0\0\x03\
\0\0\0\x11\0\0\0\0\0\0\0\x03\0\0\0\x04\0\0\0\x15\0\0\0\0\0\0\0\x03\0\0\0\x08\0\
\0\0\x1f\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x08\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\
\0\x0c\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x10\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x14\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x18\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x1c\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x20\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x24\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x28\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x2c\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x30\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x34\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x38\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x3c\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x40\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x44\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x48\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x4c\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x50\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x54\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x58\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x5c\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x60\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x64\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x68\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x6c\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x70\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x74\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x78\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x7c\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x80\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x84\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x88\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x8c\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x90\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x94\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x98\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x08\0\0\0\0\0\0\0\x02\0\0\0\x0b\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\
\xc4\x01\0\0\0\0\0\0\x04\0\0\0\x0b\0\0\0\x2c\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\
\x40\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x50\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\
\x60\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x70\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\
\x80\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x14\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\
\x18\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\x22\0\0\0\0\0\0\0\x03\0\0\0\x09\0\0\0\
\x26\0\0\0\0\0\0\0\x03\0\0\0\x09\0\0\0\x2a\0\0\0\0\0\0\0\x03\0\0\0\x09\0\0\0\
\x36\0\0\0\0\0\0\0\x03\0\0\0\x09\0\0\0\x4b\0\0\0\0\0\0\0\x03\0\0\0\x09\0\0\0\
\x60\0\0\0\0\0\0\0\x03\0\0\0\x09\0\0\0\x7a\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\
\x0a\x0b\0\x2e\x64\x65\x62\x75\x67\x5f\x61\x62\x62\x72\x65\x76\0\x2e\x74\x65\
\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x6b\x70\x72\x6f\
\x62\x65\x2f\x73\x65\x63\x75\x72\x69\x74\x79\x5f\x73\x6f\x63\x6b\x65\x74\x5f\
\x63\x6f\x6e\x6e\x65\x63\x74\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x73\
\x74\x72\x5f\x6f\x66\x66\x73\x65\x74\x73\0\x2e\x64\x65\x62\x75\x67\x5f\x73\x74\
\x72\0\x2e\x64\x65\x62\x75\x67\x5f\x6c\x69\x6e\x65\x5f\x73\x74\x72\0\x2e\x72\
\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x61\x64\x64\x72\0\x68\x65\x6c\x6c\x6f\0\
\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x69\x6e\x66\x6f\0\x2e\x6c\x6c\x76\
\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\
\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x6c\x69\x6e\x65\0\x2e\x72\x65\x6c\x2e\
\x64\x65\x62\x75\x67\x5f\x66\x72\x61\x6d\x65\0\x68\x65\x6c\x6c\x6f\x5f\x6b\x65\
\x72\x6e\x2e\x63\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\
\x2e\x72\x65\x6c\x2e\x42\x54\x46\0\x2e\x72\x6f\x64\x61\x74\x61\x2e\x73\x74\x72\
\x31\x2e\x31\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xde\0\0\0\x03\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x72\x0e\0\0\0\0\0\0\x06\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x01\0\0\0\x06\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x22\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x40\0\0\0\0\0\0\0\x58\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\xf7\0\0\0\x01\0\0\0\x32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x98\0\
\0\0\0\0\0\0\x0c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\xa8\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa4\0\0\0\0\0\0\0\
\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa8\0\0\0\0\0\0\0\xdd\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8d\0\0\0\x01\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x85\x01\0\0\0\0\0\0\x90\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x89\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\xc0\x0a\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x18\0\0\0\x07\0\0\0\x08\0\0\
\0\0\0\0\0\x10\0\0\0\0\0\0\0\x45\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x15\x03\0\0\0\0\0\0\x9c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x41\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0b\0\0\0\
\0\0\0\x50\x02\0\0\0\0\0\0\x18\0\0\0\x09\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\
\0\0\x58\0\0\0\x01\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb1\x03\0\0\0\0\0\0\
\x03\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x77\0\
\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb4\x04\0\0\0\0\0\0\x18\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x73\0\0\0\x09\0\0\0\
\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\x0d\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x18\0\
\0\0\x0c\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xf2\0\0\0\x01\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\xcc\x04\0\0\0\0\0\0\x23\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xee\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x70\x0d\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x18\0\0\0\x0e\0\0\0\x08\0\0\
\0\0\0\0\0\x10\0\0\0\0\0\0\0\x19\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\xf0\x07\0\0\0\0\0\0\x90\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x15\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\x0d\0\0\
\0\0\0\0\x60\0\0\0\0\0\0\0\x18\0\0\0\x10\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\
\0\0\xc4\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\x08\0\0\0\0\0\0\
\x28\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc0\0\0\0\
\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\x0d\0\0\0\0\0\0\x20\0\0\0\0\0\
\0\0\x18\0\0\0\x12\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xb4\0\0\0\x01\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa8\x08\0\0\0\0\0\0\x9b\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb0\0\0\0\x09\0\0\0\x40\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x0e\0\0\0\0\0\0\x70\0\0\0\0\0\0\0\x18\0\0\0\x14\0\0\0\
\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x63\0\0\0\x01\0\0\0\x30\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x43\x09\0\0\0\0\0\0\x5d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\
\0\0\0\x01\0\0\0\0\0\0\0\x99\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\
\0\0\0\x70\x0e\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\xe6\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa0\x09\
\0\0\0\0\0\0\x20\x01\0\0\0\0\0\0\x01\0\0\0\x0a\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\
\0\0\0\0\0";
}

#ifdef __cplusplus
struct hello_kern *hello_kern::open(const struct bpf_object_open_opts *opts) { return hello_kern__open_opts(opts); }
struct hello_kern *hello_kern::open_and_load() { return hello_kern__open_and_load(); }
int hello_kern::load(struct hello_kern *skel) { return hello_kern__load(skel); }
int hello_kern::attach(struct hello_kern *skel) { return hello_kern__attach(skel); }
void hello_kern::detach(struct hello_kern *skel) { hello_kern__detach(skel); }
void hello_kern::destroy(struct hello_kern *skel) { hello_kern__destroy(skel); }
const void *hello_kern::elf_bytes(size_t *sz) { return hello_kern__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
hello_kern__assert(struct hello_kern *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __HELLO_KERN_SKEL_H__ */
